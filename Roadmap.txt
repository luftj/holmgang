==========
=  Todo  =
==========

*******************************
* Rule no. 1:                 *
* Don't prematurely optimise! *
*******************************

Concept
-how to store ai behaviour in maps? [1]
-equipped items as separate sprites with scenegraph? or exhaustive tilesets? [2]
-world simulation outside viewport

Architecture/Technical Debt
[X]-merge itemcomponent and equipmentcomponent?
-savefilehandler: maybe implement ISerialisable in Component, instead of relying on defalt ctor?
-field visibility in components
--some come into conflict with deserialisation -> deserialise method?

Gamestate
[X]-resetting state
[X]-resume game with loading from savestate
[X]-save game
[X]-store map in savegame
[ ]-loading entities from map
--store entity names/types in map
--entityfactory createfromstring method takes pos and type/name
--call above when loading savestate

Map handling
-decouple tiledmap handling
-load spawn points from object layer. -> point objects in object layer -> entityfactory interface. consider [1]

Gameplay
-movement
--velocity system -> needed for determining attack directions
[X]--slide along obstacles
-character actions/states
[/]--attacks
---attack speed
---attack directions? via current movement -> moving left: attack from left etc
[X]---ranged attack -> for aiming ranged, keyup->shoot/throw (other method: key for swapping melee/ranged then normal or holding key)
[X]----draw aiming help line
[X]----range and deceleration -> remove damagingcomponent after drop
[ ]---throwing melee weapon and shield?
---push back enemies (especially when they block)
[/]block
---block directions? (except shield)
---backstab?
[X]---damage shield
---reduce movement speed
--dash/sprint
--roll (sideways dash) -> how to control?
--duck?
-equipment/items
[ ]--inventory and iso texture for every item -> dynamic getter in contentsupplier
[X]--picking up items
[X]---auto equip
[X]--item stacks
[X]--equipping/unequipping items
[X]--dropping items
[X]---item stacks on ground
[/]--item classes etc
[/]--drawing equipped items
[ ]---consider [2]
[/]--stats
[X]--state, condition
--leveling
--highlight hovered-over items -> pickerSystem -> manipulate spriteComponent if has<PickableComponent> outlineeffect in spritebatch?
---border texture effect?

AI
-behaviour statemachine?
-pathfinding
--navmesh?
[X]-more precise collision for ai (at least onscreen)
-factions/friend-or-foe detection
[X]--pull aggro when attacked
--change faction relation when aggro is pulled
-collision with other characters
--collidercomponent (enables different map storage as well)

UI
-HUD
--runes
[ ]-other
[X]--inventory screen etc
[ ]--dialog screens? trade?

Particle system and environmental effects
-weapon swoosh
-blood
-fire
-light and shadow -> apply texeffect when drawing map? or draw extra layer (worse performance?)?

Environment interaction
-doors/map changes -> place triggers in object layer of map
-talking to npc
[X]--simple speech: print text after interact
--complex dialogue: trade etc
-using usable things?
-movement speed on different soil types -> place in collision layer of map

menues
-options
--screen resolution
--fullscreen
-layouting
-loadgamescreen with savegame selection
-savegamescreen with filepath/savename specification?

=============
=  Roadmap  =
=============

v0.1

v0.5 FIRST PLAYABLE
- major gameplay implemented
-- fighting system
-- inventory and equipment functionality
-- story driven AI -> events & triggers changing AI behaviour
- first level complete
-- map changes (ie dungeon levels)
-- loading entities from map
-- environmental effects (e.g. lighting and fire)
- asset pipeline complete
-- pipeline tools programmed if needed -> enables productive content workflow

v0.8 ALPHA
-feature complete
- fully playable
- only tweaking of code from here on
- assets partially finished
- multiplayer

v0.9 BETA
-code freeze -> only bugfixing from here on out
-feature and asset complete

v1.0 RELEASE